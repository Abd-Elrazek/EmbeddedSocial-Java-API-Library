/**
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
 * the MIT License. See LICENSE in the project root for license information.
 * <autogenerated> This file was generated using AutoRest. </autogenerated>
 */

package com.microsoft.socialplus.autorest;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.socialplus.autorest.models.FeedResponseActivityView;
import com.microsoft.socialplus.autorest.models.FeedResponseTopicView;
import com.microsoft.socialplus.autorest.models.FeedResponseUserCompactView;
import com.microsoft.socialplus.autorest.models.PostFollowingRequest;
import java.io.IOException;

/**
 * An instance of this class provides access to all the operations defined
 * in MyFollowingOperations.
 */
public interface MyFollowingOperations {
    /**
     * Get the feed of users that I am following.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the FeedResponseUserCompactView object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<FeedResponseUserCompactView> getFollowing(String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get the feed of users that I am following.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getFollowingAsync(String authorization, final ServiceCallback<FeedResponseUserCompactView> serviceCallback) throws IllegalArgumentException;
    /**
     * Get the feed of users that I am following.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param cursor Current read cursor
     * @param limit Number of items to return
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the FeedResponseUserCompactView object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<FeedResponseUserCompactView> getFollowing(String authorization, String cursor, Integer limit, String appkey, String userHandle) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get the feed of users that I am following.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param cursor Current read cursor
     * @param limit Number of items to return
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getFollowingAsync(String authorization, String cursor, Integer limit, String appkey, String userHandle, final ServiceCallback<FeedResponseUserCompactView> serviceCallback) throws IllegalArgumentException;

    /**
     * Follow a user.
     *
     * @param request Post following request
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<Object> postFollowing(PostFollowingRequest request, String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Follow a user.
     *
     * @param request Post following request
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall postFollowingAsync(PostFollowingRequest request, String authorization, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException;
    /**
     * Follow a user.
     *
     * @param request Post following request
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<Object> postFollowing(PostFollowingRequest request, String authorization, String appkey, String userHandle) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Follow a user.
     *
     * @param request Post following request
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall postFollowingAsync(PostFollowingRequest request, String authorization, String appkey, String userHandle, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException;

    /**
     * Unfollow a user.
     *
     * @param userHandle User handle
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<Object> deleteFollowing(String userHandle, String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Unfollow a user.
     *
     * @param userHandle User handle
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall deleteFollowingAsync(String userHandle, String authorization, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException;
    /**
     * Unfollow a user.
     *
     * @param userHandle User handle
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle1 This field is for internal use only. Do not provide a value except under special circumstances.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<Object> deleteFollowing(String userHandle, String authorization, String appkey, String userHandle1) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Unfollow a user.
     *
     * @param userHandle User handle
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle1 This field is for internal use only. Do not provide a value except under special circumstances.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall deleteFollowingAsync(String userHandle, String authorization, String appkey, String userHandle1, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException;

    /**
     * Remove a topic from the feed of topics authored by users that I'm following.
     * My following topics feed is a feed of topics created by users that I am following.
     *             This API call will remove the specified topic from that feed.
     *
     * @param topicHandle Topic handle
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<Object> deleteTopic(String topicHandle, String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Remove a topic from the feed of topics authored by users that I'm following.
     * My following topics feed is a feed of topics created by users that I am following.
     *             This API call will remove the specified topic from that feed.
     *
     * @param topicHandle Topic handle
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall deleteTopicAsync(String topicHandle, String authorization, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException;
    /**
     * Remove a topic from the feed of topics authored by users that I'm following.
     * My following topics feed is a feed of topics created by users that I am following.
     *             This API call will remove the specified topic from that feed.
     *
     * @param topicHandle Topic handle
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<Object> deleteTopic(String topicHandle, String authorization, String appkey, String userHandle) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Remove a topic from the feed of topics authored by users that I'm following.
     * My following topics feed is a feed of topics created by users that I am following.
     *             This API call will remove the specified topic from that feed.
     *
     * @param topicHandle Topic handle
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall deleteTopicAsync(String topicHandle, String authorization, String appkey, String userHandle, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException;

    /**
     * Get the feed of topics authored by users that I'm following.
     * My following topics feed is a list of topics posted by users that I am following.
     *             This feed is time ordered, with the most recent topic first.
     *             This feed will not include topics that I have explicitly deleted from this feed.
     *             When I follow a user, all of their past topics will be added to this feed, and all their
     *             future topics will be added to this feed when they are created.
     *             When I unfollow a user, all of their previous topics will be removed from the feed and
     *             none of their future topics will be added to this feed.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the FeedResponseTopicView object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<FeedResponseTopicView> getTopics(String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get the feed of topics authored by users that I'm following.
     * My following topics feed is a list of topics posted by users that I am following.
     *             This feed is time ordered, with the most recent topic first.
     *             This feed will not include topics that I have explicitly deleted from this feed.
     *             When I follow a user, all of their past topics will be added to this feed, and all their
     *             future topics will be added to this feed when they are created.
     *             When I unfollow a user, all of their previous topics will be removed from the feed and
     *             none of their future topics will be added to this feed.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getTopicsAsync(String authorization, final ServiceCallback<FeedResponseTopicView> serviceCallback) throws IllegalArgumentException;
    /**
     * Get the feed of topics authored by users that I'm following.
     * My following topics feed is a list of topics posted by users that I am following.
     *             This feed is time ordered, with the most recent topic first.
     *             This feed will not include topics that I have explicitly deleted from this feed.
     *             When I follow a user, all of their past topics will be added to this feed, and all their
     *             future topics will be added to this feed when they are created.
     *             When I unfollow a user, all of their previous topics will be removed from the feed and
     *             none of their future topics will be added to this feed.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param cursor Current read cursor
     * @param limit Number of items to return
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the FeedResponseTopicView object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<FeedResponseTopicView> getTopics(String authorization, String cursor, Integer limit, String appkey, String userHandle) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get the feed of topics authored by users that I'm following.
     * My following topics feed is a list of topics posted by users that I am following.
     *             This feed is time ordered, with the most recent topic first.
     *             This feed will not include topics that I have explicitly deleted from this feed.
     *             When I follow a user, all of their past topics will be added to this feed, and all their
     *             future topics will be added to this feed when they are created.
     *             When I unfollow a user, all of their previous topics will be removed from the feed and
     *             none of their future topics will be added to this feed.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param cursor Current read cursor
     * @param limit Number of items to return
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getTopicsAsync(String authorization, String cursor, Integer limit, String appkey, String userHandle, final ServiceCallback<FeedResponseTopicView> serviceCallback) throws IllegalArgumentException;

    /**
     * Get the feed of activities by users that I'm following.
     * My following activity feed is a list of activities performed by users that I am following.
     *             This feed is time ordered, with the most recent activity first.
     *             An activity is added to this feed when a user I am following does one of the following 4 actions:
     *             (a) create a comment; (b) create a reply; (c) like a topic; (d) follow a user.
     *             If a user that I am following is deleted, then their past activities will no longer appear in this feed.
     *             If an activity is performed on content that is then deleted, that activity will no longer appear in this feed.
     *             If a user has un-done an activity (e.g. unlike a previous like), then that activity will no longer appear in this feed.
     *             Ignore the unread status of each activity - it will always be true.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the FeedResponseActivityView object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<FeedResponseActivityView> getActivities(String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get the feed of activities by users that I'm following.
     * My following activity feed is a list of activities performed by users that I am following.
     *             This feed is time ordered, with the most recent activity first.
     *             An activity is added to this feed when a user I am following does one of the following 4 actions:
     *             (a) create a comment; (b) create a reply; (c) like a topic; (d) follow a user.
     *             If a user that I am following is deleted, then their past activities will no longer appear in this feed.
     *             If an activity is performed on content that is then deleted, that activity will no longer appear in this feed.
     *             If a user has un-done an activity (e.g. unlike a previous like), then that activity will no longer appear in this feed.
     *             Ignore the unread status of each activity - it will always be true.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getActivitiesAsync(String authorization, final ServiceCallback<FeedResponseActivityView> serviceCallback) throws IllegalArgumentException;
    /**
     * Get the feed of activities by users that I'm following.
     * My following activity feed is a list of activities performed by users that I am following.
     *             This feed is time ordered, with the most recent activity first.
     *             An activity is added to this feed when a user I am following does one of the following 4 actions:
     *             (a) create a comment; (b) create a reply; (c) like a topic; (d) follow a user.
     *             If a user that I am following is deleted, then their past activities will no longer appear in this feed.
     *             If an activity is performed on content that is then deleted, that activity will no longer appear in this feed.
     *             If a user has un-done an activity (e.g. unlike a previous like), then that activity will no longer appear in this feed.
     *             Ignore the unread status of each activity - it will always be true.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param cursor Current read cursor
     * @param limit Number of items to return
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the FeedResponseActivityView object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<FeedResponseActivityView> getActivities(String authorization, String cursor, Integer limit, String appkey, String userHandle) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get the feed of activities by users that I'm following.
     * My following activity feed is a list of activities performed by users that I am following.
     *             This feed is time ordered, with the most recent activity first.
     *             An activity is added to this feed when a user I am following does one of the following 4 actions:
     *             (a) create a comment; (b) create a reply; (c) like a topic; (d) follow a user.
     *             If a user that I am following is deleted, then their past activities will no longer appear in this feed.
     *             If an activity is performed on content that is then deleted, that activity will no longer appear in this feed.
     *             If a user has un-done an activity (e.g. unlike a previous like), then that activity will no longer appear in this feed.
     *             Ignore the unread status of each activity - it will always be true.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param cursor Current read cursor
     * @param limit Number of items to return
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getActivitiesAsync(String authorization, String cursor, Integer limit, String appkey, String userHandle, final ServiceCallback<FeedResponseActivityView> serviceCallback) throws IllegalArgumentException;

}
