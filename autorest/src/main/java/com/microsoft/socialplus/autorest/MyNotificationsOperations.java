/**
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under
 * the MIT License. See LICENSE in the project root for license information.
 * <autogenerated> This file was generated using AutoRest. </autogenerated>
 */

package com.microsoft.socialplus.autorest;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.socialplus.autorest.models.CountResponse;
import com.microsoft.socialplus.autorest.models.FeedResponseActivityView;
import com.microsoft.socialplus.autorest.models.PutNotificationsStatusRequest;
import java.io.IOException;

/**
 * An instance of this class provides access to all the operations defined
 * in MyNotificationsOperations.
 */
public interface MyNotificationsOperations {
    /**
     * Update notifications status.
     * This API call records the most recent notification that the user has read (or seen).
     *             In the GET notifications API call, each notification will have an unread status.
     *             Any notifications that are newer than this ReadActivityHandle will have an unread status of true.
     *             Any notifications that correspond to this ReadActivityHandle or older will have an unread status of false.
     *             If this API call has never been made, then all notifications will have an unread status of true.
     *
     * @param request Put notifications status request
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<Object> putNotificationsStatus(PutNotificationsStatusRequest request, String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Update notifications status.
     * This API call records the most recent notification that the user has read (or seen).
     *             In the GET notifications API call, each notification will have an unread status.
     *             Any notifications that are newer than this ReadActivityHandle will have an unread status of true.
     *             Any notifications that correspond to this ReadActivityHandle or older will have an unread status of false.
     *             If this API call has never been made, then all notifications will have an unread status of true.
     *
     * @param request Put notifications status request
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall putNotificationsStatusAsync(PutNotificationsStatusRequest request, String authorization, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException;
    /**
     * Update notifications status.
     * This API call records the most recent notification that the user has read (or seen).
     *             In the GET notifications API call, each notification will have an unread status.
     *             Any notifications that are newer than this ReadActivityHandle will have an unread status of true.
     *             Any notifications that correspond to this ReadActivityHandle or older will have an unread status of false.
     *             If this API call has never been made, then all notifications will have an unread status of true.
     *
     * @param request Put notifications status request
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the Object object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<Object> putNotificationsStatus(PutNotificationsStatusRequest request, String authorization, String appkey, String userHandle) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Update notifications status.
     * This API call records the most recent notification that the user has read (or seen).
     *             In the GET notifications API call, each notification will have an unread status.
     *             Any notifications that are newer than this ReadActivityHandle will have an unread status of true.
     *             Any notifications that correspond to this ReadActivityHandle or older will have an unread status of false.
     *             If this API call has never been made, then all notifications will have an unread status of true.
     *
     * @param request Put notifications status request
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall putNotificationsStatusAsync(PutNotificationsStatusRequest request, String authorization, String appkey, String userHandle, final ServiceCallback<Object> serviceCallback) throws IllegalArgumentException;

    /**
     * Get my notifications.
     * This gets a feed of activities.
     *             This feed is time ordered, with the most recent activity first.
     *             An activity is added to this feed when any user other than myself does one of the following 6 actions:
     *             (a) creates a comment to my topic; (b) creates a reply to my comment; (c) likes my topic; (d) follows me;
     *             (e) requests to follow me when I'm a private user; (f) accepts my request to follow them when they are a private user.
     *             Each activity has an unread status, which is controlled by doing a PUT on the status API call.
     *             If a user that performed the activity is deleted, then that activity will no longer appear in this feed.
     *             If an activity is performed on content that is then deleted, that activity will no longer appear in this feed.
     *             If a user has un-done an activity (e.g. unlike a previous like), then that activity will no longer appear in this feed.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the FeedResponseActivityView object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<FeedResponseActivityView> getNotifications(String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get my notifications.
     * This gets a feed of activities.
     *             This feed is time ordered, with the most recent activity first.
     *             An activity is added to this feed when any user other than myself does one of the following 6 actions:
     *             (a) creates a comment to my topic; (b) creates a reply to my comment; (c) likes my topic; (d) follows me;
     *             (e) requests to follow me when I'm a private user; (f) accepts my request to follow them when they are a private user.
     *             Each activity has an unread status, which is controlled by doing a PUT on the status API call.
     *             If a user that performed the activity is deleted, then that activity will no longer appear in this feed.
     *             If an activity is performed on content that is then deleted, that activity will no longer appear in this feed.
     *             If a user has un-done an activity (e.g. unlike a previous like), then that activity will no longer appear in this feed.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getNotificationsAsync(String authorization, final ServiceCallback<FeedResponseActivityView> serviceCallback) throws IllegalArgumentException;
    /**
     * Get my notifications.
     * This gets a feed of activities.
     *             This feed is time ordered, with the most recent activity first.
     *             An activity is added to this feed when any user other than myself does one of the following 6 actions:
     *             (a) creates a comment to my topic; (b) creates a reply to my comment; (c) likes my topic; (d) follows me;
     *             (e) requests to follow me when I'm a private user; (f) accepts my request to follow them when they are a private user.
     *             Each activity has an unread status, which is controlled by doing a PUT on the status API call.
     *             If a user that performed the activity is deleted, then that activity will no longer appear in this feed.
     *             If an activity is performed on content that is then deleted, that activity will no longer appear in this feed.
     *             If a user has un-done an activity (e.g. unlike a previous like), then that activity will no longer appear in this feed.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param cursor Current read cursor
     * @param limit Number of items to return
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the FeedResponseActivityView object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<FeedResponseActivityView> getNotifications(String authorization, String cursor, Integer limit, String appkey, String userHandle) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get my notifications.
     * This gets a feed of activities.
     *             This feed is time ordered, with the most recent activity first.
     *             An activity is added to this feed when any user other than myself does one of the following 6 actions:
     *             (a) creates a comment to my topic; (b) creates a reply to my comment; (c) likes my topic; (d) follows me;
     *             (e) requests to follow me when I'm a private user; (f) accepts my request to follow them when they are a private user.
     *             Each activity has an unread status, which is controlled by doing a PUT on the status API call.
     *             If a user that performed the activity is deleted, then that activity will no longer appear in this feed.
     *             If an activity is performed on content that is then deleted, that activity will no longer appear in this feed.
     *             If a user has un-done an activity (e.g. unlike a previous like), then that activity will no longer appear in this feed.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param cursor Current read cursor
     * @param limit Number of items to return
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getNotificationsAsync(String authorization, String cursor, Integer limit, String appkey, String userHandle, final ServiceCallback<FeedResponseActivityView> serviceCallback) throws IllegalArgumentException;

    /**
     * Get unread notifications count.
     * This returns a count of activities in my notification feed that have an unread status of true.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the CountResponse object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<CountResponse> getNotificationsCount(String authorization) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get unread notifications count.
     * This returns a count of activities in my notification feed that have an unread status of true.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getNotificationsCountAsync(String authorization, final ServiceCallback<CountResponse> serviceCallback) throws IllegalArgumentException;
    /**
     * Get unread notifications count.
     * This returns a count of activities in my notification feed that have an unread status of true.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @throws ServiceException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the CountResponse object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<CountResponse> getNotificationsCount(String authorization, String appkey, String userHandle) throws ServiceException, IOException, IllegalArgumentException;

    /**
     * Get unread notifications count.
     * This returns a count of activities in my notification feed that have an unread status of true.
     *
     * @param authorization Authentication (must begin with string "Bearer "). Possible values are:
     -sessionToken for client auth
     -AAD token for service auth
     * @param appkey App key must be filled in when using AAD tokens for Authentication.
     * @param userHandle This field is for internal use only. Do not provide a value except under special circumstances.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getNotificationsCountAsync(String authorization, String appkey, String userHandle, final ServiceCallback<CountResponse> serviceCallback) throws IllegalArgumentException;

}
